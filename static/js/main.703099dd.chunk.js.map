{"version":3,"sources":["components/header.jsx","components/card.jsx","components/customError.jsx","components/loader.jsx","components/cardContainer.jsx","components/search.jsx","apollo/apollo.js","apollo/queries.js","routes/home.jsx","routes/error.jsx","components/date.jsx","components/episode.jsx","routes/charInfo.jsx","components/footer.jsx","App.jsx","index.js"],"names":["Header","title","className","Card","id","name","gender","status","image","src","alt","to","CustomError","Loader","CardContainer","Query","query","charName","undefined","randomPage","Math","floor","random","useQuery","variables","loading","error","data","characters","results","init","length","slice","map","Search","callBack","useState","text","setText","onChange","e","target","value","onSubmit","type","placeholder","onClick","focusable","role","xmlns","viewBox","fill","d","Client","ApolloClient","uri","cache","InMemoryCache","getRandomCharsCover","gql","getCharactersByName","getFullDataByID","Home","setCharName","n","ApolloProvider","client","Error","CustomDate","date","getDay","getMonth","getFullYear","Episode","episode","created","dateC","Date","CharInfo","idC","useParams","character","species","location","toString","dimension","residents","Footer","href","App","path","component","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.703099dd.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport '../styles/fonts.css';\n\nconst Header = ({ title }) => (\n\t<h1 className=\"text-6xl pt-40 font-bold\ttext-center text-gray-800 comic-neue\">{ title }</h1>\n);\n\nHeader.propTypes = ({\n\ttitle: PropTypes.string,\n});\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst Card = ({ id, name, gender, status, image }) => {  \n  return (\n    <div\n\t\t\tclassName=\"py-8 px-8 max-w-sm mx-auto bg-white rounded-xl shadow-md space-y-2 mb-1 lg:py-4 lg:space-y-0 lg:space-x-6 lg:m-1.5\">\n      <img\n        className=\"block mx-auto h-24 rounded-full sm:mx-0 sm:flex-shrink-0\"\n        src={ image }\n        alt={`${name} image`}\n      />\n      <div className=\"text-center space-y-2 sm:text-left\">\n        <div className=\"space-y-0.5\">\n          <p className=\"text-lg text-black font-semibold\">{ name }</p>\n          <p className=\"text-gray-500 font-medium\">{ gender }</p>\n\t\t\t\t\t<p className=\"text-gray-500 text-opacity-75 font-medium\">{status === 'Alive' ? '🟢' : status === 'unknown' ? '❓' : '🔴'} { status }</p>\n        </div>\n        <Link to={`/charInfo/${id}`}>\n          <button\n            className=\"px-4 py-1 text-sm text-purple-600 font-semibold rounded-full border border-purple-200 hover:text-white hover:bg-purple-600 hover:border-transparent focus:outline-none focus:ring-2 focus:ring-purple-600 focus:ring-offset-2\"\n          >\n            More information\n          </button>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nCard.propTypes = {\n  id: PropTypes.any,\n  name: PropTypes.string,\n\tgender: PropTypes.string,\n\tstatus: PropTypes.string,\n\timage: PropTypes.string\n};\n\nexport default Card;\n","import React from 'react';\n\nconst CustomError = () => (\n\t<h1\n\t\tclassName=\"mt-96 mb-20 text-8xl text-center text-red-600 font-extrabold pb-4\"\n\t>\n\t\tError!!!\n\t</h1>\n);\n\nexport default CustomError;\n","import React from 'react';\n\nconst Loader = () => (\n\t<h1\n\t\tclassName=\"text-8xl text-center font-extrabold pb-4\"\n\t>\n\t\tLoading...\n\t</h1>\n);\n\nexport default Loader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useQuery } from '@apollo/client';\n\nimport Card from './card';\nimport CustomError from './customError';\nimport Loader from './loader';\n\nconst CardContainer = ({ query, charName }) => {\n\tlet Query;\n\n\tif (charName === undefined)\n\t{\n\t\tconst randomPage = Math.floor(Math.random() * 11);\n\t\tQuery = useQuery(query, {\n\t\t\tvariables: { randomPage },\n\t\t});\n\t}\n\telse\n\t\tQuery = useQuery(query, {\n\t\t\tvariables: { charName },\n\t\t});\n\n\tconst { loading, error, data } = Query;\n\n\tif (loading)\n\t\treturn (<div className=\"light-cian mt-40 px-10\">\n\t\t\t<Loader />\n\t\t</div>);\n\tif (error) return <CustomError />\n\n\tlet characters = data.characters.results;\n\tif (charName === undefined)\n\t{\n\t\tconst init = Math.random() * ((characters.length-6) - 0) + 0;\n\t\tcharacters = characters.slice(init, init+5);\n\t}\n\treturn (\n\t\t<div className=\"mb-5 p-2 w-max m-auto flex flex-col flex-nowrap items-center md:grid md:grid-flow-row md:grid-cols-3 md:grid-rows-1 md:gap-4 lg:p-1 lg:grid-rows-2\">\n\t\t\t{\n\t\t\t\tcharacters.map(({id, name, gender, status, image}) => (\n\t\t\t\t\t<Card\n\t\t\t\t\t\tkey={id}\n\t\t\t\t\t\tid={id}\n\t\t\t\t\t\tname={name}\n\t\t\t\t\t\tgender={gender}\n\t\t\t\t\t\tstatus={status}\n\t\t\t\t\t\timage={image}\n\t\t\t\t\t/>\n\t\t\t\t))\n\t\t\t}\n\t\t</div>\n\t);\n};\n\nCardContainer.propTypes = ({\n\tquery: PropTypes.object,\n\tcharName: PropTypes.string\n});\n\nexport default CardContainer;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n// svg from https://fontawesome.com/v5.15/icons/search?style=solid\n\nconst Search = ({ callBack }) => {\n\tconst [text, setText] = useState('');\n\n  return (\n    <div className=\"inline-flex absolute mt-5 right-20\">\n      <input\n        className=\"mr-2 h-8 bg-transparent border-b-2 border-red-800 rounded-md text-black placeholder-gray-700\"\n        onChange={e => setText(e.target.value)}\n        onSubmit={callBack(text)}\n        type=\"text\"\n        value={text}\n        placeholder=\"Use power to search...\"\n      />\n      <button\n        onClick={() => callBack(text)}\n      >\n        <svg\n          aria-hidden=\"true\"\n          focusable=\"false\"\n          data-prefix=\"fas\"\n          data-icon=\"search\"\n          className=\"w-8 text-red-800\"\n          role=\"img\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 512 512\"\n        >\n          <path\n            fill=\"currentColor\"\n            d=\"M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z\"\n          ></path>\n        </svg>\n      </button>\n    </div>\n  );\n};\n\nSearch.propTypes = ({\n  callBack: PropTypes.func\n});\n\nexport default Search;\n","import { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst Client = new ApolloClient({\n\turi: 'https://rickandmortyapi.com/graphql',\n\tcache: new InMemoryCache(),\n});\n\nexport default Client;\n","import { gql } from '@apollo/client';\n\nconst getRandomCharsCover = gql`\n\tquery getRandomCharsCover($randomPage: Int!) {\n\t\tcharacters(page: $randomPage) {\n\t\t\tresults {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tgender\n\t\t\t\tstatus\n\t\t\t\timage\n\t\t\t}\n\t\t}\n\t}\n`;\n\n// for now, but this is what we need from search component\n\tconst getCharactersByName = gql`\n\t\tquery getCharactersByName($charName: String!) {\n\t\t\tcharacters(filter: { name: $charName }) {\n\t\t\t\tresults {\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\tgender\n\t\t\t\t\tstatus\n\t\t\t\t\timage\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`;\n\n// we will get the id from the Card components\nconst getFullDataByID = gql`\n\tquery getFullDataByID ($id: ID!) {\n\t\tcharacter(id: $id) {\n\t\t\tid\n\t\t\tname\n\t\t\tstatus\n\t\t\tspecies\n\t\t\ttype\n\t\t\tgender\n\t\t\tlocation {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\ttype\n\t\t\t\tdimension\n\t\t\t\tresidents {\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\tgender\n\t\t\t\t\tstatus\n\t\t\t\t\timage\n\t\t\t\t}\n\t\t\t\tcreated\n\t\t\t}\n\t\t\timage\n\t\t\tepisode {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tair_date\n\t\t\t\tepisode\n\t\t\t\tcreated\n\t\t\t}\n\t\t\tcreated\n\t\t}\n\t}\n`;\n\nexport {\n\tgetRandomCharsCover,\n\tgetCharactersByName,\n\tgetFullDataByID\n}\n","import React, { useState } from 'react';\nimport { ApolloProvider } from '@apollo/client';\n\nimport Header from '../components/header';\nimport CardContainer from '../components/cardContainer';\nimport Search from '../components/search';\n\nimport Client from '../apollo/apollo';\nimport { getRandomCharsCover, getCharactersByName } from '../apollo/queries';\n\nconst Home = () => {\n\tconst [charName, setCharName] = useState('');\n\t\n\tconst callBack = (n) => setCharName(n);\n\n\treturn (\n\t\t<div>\n\t\t\t<header>\n\t\t\t\t<nav>\n\t\t\t\t\t<Search callBack={callBack} />\n\t\t\t\t</nav>\n\t\t\t\t<Header title=\"Welcome to Ricks deck!!!\" />\n\t\t\t</header>\n\t\t\t<hr className=\"mt-6 mb-5 w-2/5 m-auto\" />\n\t\t\t<main>\n\t\t\t\t<div className=\"containerHeight w-max m-auto mb-10 pr-2 pl-3 overflow-x-hidden overflow-y-auto border-gray-900 border-2 rounded-md\">\n\t\t\t\t\t<ApolloProvider client={Client}>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t(charName === '')\n\t\t\t\t\t\t\t\t? <CardContainer query={getRandomCharsCover} />\n\t\t\t\t\t\t\t\t:\t<CardContainer query={getCharactersByName} charName={charName} />\n\t\t\t\t\t\t}\n\t\t\t\t\t</ApolloProvider>\n\t\t\t\t</div>\n\t\t\t</main>\n\t\t</div>\n\t)\n};\n\nexport default Home;\n","import React from 'react';\nimport CustomError from '../components/customError';\n\nconst Error = () => (\n\t<div className=\"mt-96 mb-20\">\n\t\t<CustomError />\n\t</div>\n);\n\nexport default Error;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst CustomDate = ({ date }) => {\n\treturn (\n\t\t<p className=\"italic text-center font-extralight text-gray-600\">Created: {date.getDay()}/{date.getMonth()}/{date.getFullYear()}</p>\n\t)\n};\n\nCustomDate.propTypes = {\n\tdate: PropTypes.instanceOf(Date).isRequired,\n};\n\nexport default CustomDate;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport CustomDate from './date';\n\nconst Episode = ({ id, name, episode, created }) => {\n\tconst dateC = new Date(created);\n\treturn (\n\t\t<div className=\"bg-gray-300 m-2 p-4 w-max rounded-md\">\n\t\t\t<h3 className=\"text-center text-2xl\">{name}</h3>\n\t\t\t<p className=\"text-center text-gray-800 font-semibold\">{episode} - ({id})</p>\n\t\t\t<CustomDate date={dateC} />\n\t\t</div>\n\t);\n}\n\nEpisode.propTypes = {\n  id: PropTypes.any,\n  name: PropTypes.string,\n\t// air_date: PropTypes.string,\n\tepisode: PropTypes.string,\n\tcreated: PropTypes.string\n};\n\nexport default Episode;\n","import React from 'react';\nimport { useQuery } from '@apollo/client';\nimport { Link, useParams } from 'react-router-dom';\n\nimport { getFullDataByID } from '../apollo/queries';\nimport Client from '../apollo/apollo';\nimport Card from '../components/card';\nimport Episode from '../components/episode';\nimport CustomDate from '../components/date';\nimport CustomError from '../components/customError';\nimport Loader from '../components/loader';\n\nconst CharInfo = () => {\n  const idC = useParams().id;\n\n  const { loading, error, data } = useQuery(getFullDataByID, {\n    variables: { id: idC },\n    client: Client,\n  });\n\n  if (loading) return (\n    <div className=\"text-gray-800 mt-60 mb-20\">\n      <Loader />\n    </div>\n  );\n  if (error) return <CustomError />;\n\n  const {\n    name,\n    status,\n    species,\n    type,\n    gender,\n    location,\n    image,\n    episode,\n    created,\n  } = data.character;\n\n  return (\n    <main>\n      <nav className=\"w-max\">\n        <Link to='/'>\n          <h3 className=\"text-3xl m-4 text-blue-700 underline\">\n            {'< '} Back\n          </h3>\n        </Link>\n      </nav>\n      <section className=\"mt-8\">\n        <img className=\"rounded-full m-auto\" src={image} />\n        <h1 className=\"text-3xl text-center mt-2\">\n          {name} - ({idC})\n        </h1>\n        <p className=\"italic text-center font-extralight text-gray-600\">Created: {new Date(created).toString()}</p>\n        <div>\n          <table className=\"m-auto mt-4 mb-4 bg-green-300 border-4 rounded-md border-gray-800 table-fixed\">\n            <tbody>\n              <tr className=\"border-2 border-gray-600\">\n                <th className=\"pt-1 pl-2 w-1/2 text-left\">Type</th>\n                <td className=\"pr-4 w-1/2 text-center\">{type === '' ? '-' : type}</td>\n              </tr>\n              <tr className=\"border-2 border-gray-600\">\n                <th className=\"pr-4 pl-2 w-1/2 text-left\">Gender</th>\n                <td className=\"pr-4 w-1/2 text-center\">{(gender === 'Female') ? '♀️' : (gender === 'Male') ? '♂️' : '❓'} {gender}</td>\n              </tr>\n              <tr className=\"border-2 border-gray-600\">\n                <th className=\"pr-4\tpl-2 w-1/2 text-left\">Status</th>\n                <td className=\"pr-4 w-1/2 text-center\">{status === 'Alive' ? '🟢' : status === 'unknown' ? '❓' : '🔴'} {status}</td>\n              </tr>\n              <tr className=\"border-2 border-gray-600\">\n                <th className=\"pb-1 pl-2 w-1/2 text-left\">Species</th>\n                <td className=\"pr-4 w-1/2 text-center\">{species}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </section>\n      <hr />\n      <section>\n        <h2 className=\"text-center font-bold text-2xl pb-3 pt-2\">Episodes</h2>\n        <div className=\"p-2 m-auto items-center grid grid-flow-col grid-rows-2 gap-4 overflow-auto\">\n          {episode.map(({ id, name, episode, created }) => (\n              <Episode\n                key={id}\n                id={id}\n                name={name}\n                episode={episode}\n                created={created}\n              />\n            ))\n          }\n        </div>\n      </section>\n      <hr />\n      <section>\n        <h2 className=\"text-center font-bold text-2xl pb-3 pt-2\">Location</h2>\n        <div className=\"m-auto w-max p-4 rounded-md bg-blue-100\">\n          <h4 className=\"text-center text-xl font-bold underline pb-2\">{location.name}</h4>\n          <p className=\"text-center text-base text-gray-800\">Type: {location.type}</p>\n          <p className=\"text-center text-base text-gray-800\">Dimension: {location.dimension}</p>\n          <CustomDate date={new Date(location.created)} />\n        </div>\n        <div>\n          <h3 className=\"text-center font-bold text-xl pb-3 pt-2\">Residents</h3>\n          <div className=\"p-2 m-auto items-center grid grid-flow-col grid-rows-2 gap-4 overflow-auto\">\n            {location.residents.length !== 1 ? (\n              location.residents.map(({ id, name, gender, status, image }) => {\n                if (idC !== id)\n                  return (\n                    <Card\n                      key={id}\n                      id={id}\n                      name={name}\n                      gender={gender}\n                      status={status}\n                      image={image}\n                    />\n                  );\n              })\n            ) : (\n              <p className=\"text-center font-bold text-gray-500\">Nothing found!</p>\n            )}\n          </div>\n        </div>\n      </section>\n    </main>\n  );\n};\n\nexport default CharInfo;\n","import React from 'react';\n\nconst Footer = () => {\n\treturn (\n\t\t<div className=\"footer mt-4\">\n\t\t\t<a className=\"text-xl\" href=\"https://github.com/blitty-codes\">blitty-codes</a>\n\t\t</div>\n\t);\n};\n\nexport default Footer;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Home from './routes/home';\nimport Error from './routes/error';\nimport CharInfo from './routes/charInfo';\nimport Footer from './components/footer';\n\nimport './styles/custom.css';\n\nconst App = () => (\n\t<>\n\t\t<Switch>\n\t\t\t<Route path=\"/rick-power/\" component={Home} exact />\n\t\t\t<Route path=\"/charInfo/:id\" component={CharInfo} />\n\t\t\t<Route component={Error} exact />\n\t\t</Switch>\n\t\t<footer>\n\t\t\t<Footer />\n\t\t</footer>\n\t</>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\n\nimport './styles/index.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}